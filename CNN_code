import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import shuffle
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam
from google.colab import drive
import os

# 1. Mount Google Drive và load dữ liệu
drive.mount('/content/gdrive', force_remount=True)
data_dir = "/content/gdrive/My Drive/saved_data"

X_train = np.load(os.path.join(data_dir, "train_images.npy"))
y_train = np.load(os.path.join(data_dir, "train_labels.npy"))
X_test  = np.load(os.path.join(data_dir, "valid_images.npy"))
y_test  = np.load(os.path.join(data_dir, "valid_labels.npy"))

# 2. Kiểm tra shape và chuyển định dạng nếu cần (channels_first -> channels_last)
print("Before transpose:", X_train.shape)
if X_train.ndim == 4 and X_train.shape[1] == 3:
    X_train = X_train.transpose(0, 2, 3, 1)
    X_test  = X_test.transpose(0, 2, 3, 1)
print("After transpose: ", X_train.shape)
print("y_train unique labels:", np.unique(y_train))

# 3. Shuffle và chuẩn hóa dữ liệu
X_train, y_train = shuffle(X_train, y_train, random_state=1080)
X_test,  y_test  = shuffle(X_test,  y_test,  random_state=1080)

X_train = X_train.astype('float32') / 255.0
X_test  = X_test.astype('float32') / 255.0

# 4. Xây dựng mô hình CNN
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
    MaxPooling2D((3,3)),
    Conv2D(64, (5,5), activation='relu'),
    AveragePooling2D((3,3)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(len(np.unique(y_train)), activation='softmax')
])

model.compile(
    optimizer=Adam(learning_rate=1e-4),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)
model.summary()

# 5. Huấn luyện model
history = model.fit(
    X_train, y_train,
    epochs=60,
    batch_size=32,
    validation_split=0.1,
    verbose=1
)

# 6. Vẽ biểu đồ Training và Validation Accuracy
plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Training accuracy', color='red')
plt.plot(history.history['val_accuracy'], label='Validation accuracy', color='blue')
plt.title('Training and validation accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# 7. Đánh giá trên tập test
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=1)
print(f"Test loss: {test_loss:.4f}")
print(f"Test accuracy: {test_acc:.4f}")

# 8. Dự đoán và vẽ Confusion Matrix
y_pred_probs = model.predict(X_test)
y_pred = np.argmax(y_pred_probs, axis=1)

classes = np.unique(y_test)
label_names = ['lung_aca','lung_n','lung_scc','unknown']  # Tùy chỉnh theo nhãn thực tế

cm = confusion_matrix(y_test, y_pred, labels=classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_names)
disp.plot(cmap='Blues', xticks_rotation=45)
plt.title("Confusion Matrix")
plt.tight_layout()
plt.show()
